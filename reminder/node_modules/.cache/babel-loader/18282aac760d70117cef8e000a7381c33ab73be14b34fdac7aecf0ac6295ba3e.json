{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vkkr1\\\\Desktop\\\\webprograming full stack project\\\\webprograming full stack project\\\\reminder\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport ReminderForm from './ReminderForm';\nimport ReminderList from './ReminderList';\nimport AlarmPage from './AlarmPage';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [reminders, setReminders] = useState([]);\n  const [currentAlarm, setCurrentAlarm] = useState(null);\n  const [notification, setNotification] = useState(null);\n  const alarmAudioRef = useRef(null);\n  const timeoutRefs = useRef([]);\n  useEffect(() => {\n    const stored = JSON.parse(localStorage.getItem('reminders')) || [];\n    setReminders(stored);\n    scheduleAllAlarms(stored);\n    return () => {\n      timeoutRefs.current.forEach(timeout => clearTimeout(timeout));\n    };\n  }, []);\n  const scheduleAllAlarms = useCallback(reminders => {\n    timeoutRefs.current.forEach(timeout => clearTimeout(timeout));\n    timeoutRefs.current = [];\n    reminders.forEach(reminder => {\n      const nextAlarmTime = getNextAlarmTime(reminder);\n      if (nextAlarmTime) {\n        const delay = nextAlarmTime - new Date();\n        if (delay > 0) {\n          const timeoutId = setTimeout(() => {\n            triggerAlarm(reminder);\n          }, delay);\n          timeoutRefs.current.push(timeoutId);\n        }\n      }\n    });\n  }, []);\n  const getNextAlarmTime = reminder => {\n    const now = new Date();\n    const [h, m] = reminder.reminderTime.split(':').map(Number);\n    const target = new Date();\n    target.setHours(h, m, 0, 0);\n    if (target < now) {\n      if (reminder.frequency === 'daily') {\n        target.setDate(target.getDate() + 1);\n      } else if (reminder.frequency === 'weekly') {\n        target.setDate(target.getDate() + 7);\n      } else if (reminder.frequency === 'custom' && reminder.customDays.length > 0) {\n        const currentDay = now.getDay();\n        const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const daysToAdd = reminder.customDays.map(day => dayNames.indexOf(day)).sort((a, b) => a - b).find(dayIndex => dayIndex > currentDay) || 7 - currentDay + reminder.customDays.map(day => dayNames.indexOf(day)).sort((a, b) => a - b)[0];\n        target.setDate(target.getDate() + daysToAdd);\n      } else {\n        return null;\n      }\n    }\n    return target;\n  };\n  const triggerAlarm = reminder => {\n    setCurrentAlarm(reminder);\n    if (alarmAudioRef.current) {\n      alarmAudioRef.current.play().catch(err => {\n        console.warn(\"Playback blocked:\", err);\n        setNotification(\"Please allow audio to play alarms\");\n        setTimeout(() => setNotification(null), 3000);\n      });\n    }\n    if (reminder.frequency !== 'once') {\n      const nextTime = getNextAlarmTime(reminder);\n      if (nextTime) {\n        const delay = nextTime - new Date();\n        if (delay > 0) {\n          const timeoutId = setTimeout(() => triggerAlarm(reminder), delay);\n          timeoutRefs.current.push(timeoutId);\n        }\n      }\n    }\n  };\n  const stopAlarm = useCallback(() => {\n    if (alarmAudioRef.current) {\n      alarmAudioRef.current.pause();\n      alarmAudioRef.current.currentTime = 0;\n    }\n    setCurrentAlarm(null);\n  }, []);\n  const handleNewReminder = useCallback(newReminder => {\n    const updated = [...reminders, {\n      ...newReminder,\n      id: Date.now()\n    }];\n    setReminders(updated);\n    localStorage.setItem('reminders', JSON.stringify(updated));\n    scheduleAllAlarms(updated);\n    setNotification(\"Reminder added successfully!\");\n    setTimeout(() => setNotification(null), 3000);\n  }, [reminders, scheduleAllAlarms]);\n  const deleteReminder = useCallback(id => {\n    const updated = reminders.filter(reminder => reminder.id !== id);\n    setReminders(updated);\n    localStorage.setItem('reminders', JSON.stringify(updated));\n    scheduleAllAlarms(updated);\n    setNotification(\"Reminder deleted\");\n    setTimeout(() => setNotification(null), 3000);\n  }, [reminders, scheduleAllAlarms]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: alarmAudioRef,\n      src: \"https://assets.mixkit.co/sfx/preview/mixkit-alarm-digital-clock-beep-989.mp3\",\n      preload: \"auto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this), currentAlarm ? /*#__PURE__*/_jsxDEV(AlarmPage, {\n      reminder: currentAlarm,\n      onStop: stopAlarm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"Medicine Reminder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReminderForm, {\n        onSetReminder: handleNewReminder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReminderList, {\n        reminders: reminders,\n        onDelete: deleteReminder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0Rkg6BUHw4ReivOnDd04msJ8ftQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","ReminderForm","ReminderList","AlarmPage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","reminders","setReminders","currentAlarm","setCurrentAlarm","notification","setNotification","alarmAudioRef","timeoutRefs","stored","JSON","parse","localStorage","getItem","scheduleAllAlarms","current","forEach","timeout","clearTimeout","reminder","nextAlarmTime","getNextAlarmTime","delay","Date","timeoutId","setTimeout","triggerAlarm","push","now","h","m","reminderTime","split","map","Number","target","setHours","frequency","setDate","getDate","customDays","length","currentDay","getDay","dayNames","daysToAdd","day","indexOf","sort","a","b","find","dayIndex","play","catch","err","console","warn","nextTime","stopAlarm","pause","currentTime","handleNewReminder","newReminder","updated","id","setItem","stringify","deleteReminder","filter","className","children","ref","src","preload","fileName","_jsxFileName","lineNumber","columnNumber","onStop","onSetReminder","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/vkkr1/Desktop/webprograming full stack project/webprograming full stack project/reminder/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport ReminderForm from './ReminderForm';\nimport ReminderList from './ReminderList';\nimport AlarmPage from './AlarmPage';\nimport './App.css';\n\nfunction App() {\n  const [reminders, setReminders] = useState([]);\n  const [currentAlarm, setCurrentAlarm] = useState(null);\n  const [notification, setNotification] = useState(null);\n  const alarmAudioRef = useRef(null);\n  const timeoutRefs = useRef([]);\n\n  useEffect(() => {\n    const stored = JSON.parse(localStorage.getItem('reminders')) || [];\n    setReminders(stored);\n    scheduleAllAlarms(stored);\n    \n    return () => {\n      timeoutRefs.current.forEach(timeout => clearTimeout(timeout));\n    };\n  }, []);\n\n  const scheduleAllAlarms = useCallback((reminders) => {\n    timeoutRefs.current.forEach(timeout => clearTimeout(timeout));\n    timeoutRefs.current = [];\n    \n    reminders.forEach(reminder => {\n      const nextAlarmTime = getNextAlarmTime(reminder);\n      if (nextAlarmTime) {\n        const delay = nextAlarmTime - new Date();\n        if (delay > 0) {\n          const timeoutId = setTimeout(() => {\n            triggerAlarm(reminder);\n          }, delay);\n          timeoutRefs.current.push(timeoutId);\n        }\n      }\n    });\n  }, []);\n\n  const getNextAlarmTime = (reminder) => {\n    const now = new Date();\n    const [h, m] = reminder.reminderTime.split(':').map(Number);\n    const target = new Date();\n    target.setHours(h, m, 0, 0);\n\n    if (target < now) {\n      if (reminder.frequency === 'daily') {\n        target.setDate(target.getDate() + 1);\n      } else if (reminder.frequency === 'weekly') {\n        target.setDate(target.getDate() + 7);\n      } else if (reminder.frequency === 'custom' && reminder.customDays.length > 0) {\n        const currentDay = now.getDay();\n        const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const daysToAdd = reminder.customDays\n          .map(day => dayNames.indexOf(day))\n          .sort((a, b) => a - b)\n          .find(dayIndex => dayIndex > currentDay) || \n          (7 - currentDay + reminder.customDays.map(day => dayNames.indexOf(day)).sort((a, b) => a - b)[0]);\n        target.setDate(target.getDate() + daysToAdd);\n      } else {\n        return null;\n      }\n    }\n    return target;\n  };\n\n  const triggerAlarm = (reminder) => {\n    setCurrentAlarm(reminder);\n    if (alarmAudioRef.current) {\n      alarmAudioRef.current.play().catch(err => {\n        console.warn(\"Playback blocked:\", err);\n        setNotification(\"Please allow audio to play alarms\");\n        setTimeout(() => setNotification(null), 3000);\n      });\n    }\n    if (reminder.frequency !== 'once') {\n      const nextTime = getNextAlarmTime(reminder);\n      if (nextTime) {\n        const delay = nextTime - new Date();\n        if (delay > 0) {\n          const timeoutId = setTimeout(() => triggerAlarm(reminder), delay);\n          timeoutRefs.current.push(timeoutId);\n        }\n      }\n    }\n  };\n\n  const stopAlarm = useCallback(() => {\n    if (alarmAudioRef.current) {\n      alarmAudioRef.current.pause();\n      alarmAudioRef.current.currentTime = 0;\n    }\n    setCurrentAlarm(null);\n  }, []);\n\n  const handleNewReminder = useCallback((newReminder) => {\n    const updated = [...reminders, { ...newReminder, id: Date.now() }];\n    setReminders(updated);\n    localStorage.setItem('reminders', JSON.stringify(updated));\n    scheduleAllAlarms(updated);\n    setNotification(\"Reminder added successfully!\");\n    setTimeout(() => setNotification(null), 3000);\n  }, [reminders, scheduleAllAlarms]);\n\n  const deleteReminder = useCallback((id) => {\n    const updated = reminders.filter(reminder => reminder.id !== id);\n    setReminders(updated);\n    localStorage.setItem('reminders', JSON.stringify(updated));\n    scheduleAllAlarms(updated);\n    setNotification(\"Reminder deleted\");\n    setTimeout(() => setNotification(null), 3000);\n  }, [reminders, scheduleAllAlarms]);\n\n  return (\n    <div className=\"app-container\">\n      <audio ref={alarmAudioRef} src=\"https://assets.mixkit.co/sfx/preview/mixkit-alarm-digital-clock-beep-989.mp3\" preload=\"auto\" />\n      \n      {notification && (\n        <div className=\"notification\">\n          {notification}\n        </div>\n      )}\n      \n      {currentAlarm ? (\n        <AlarmPage reminder={currentAlarm} onStop={stopAlarm} />\n      ) : (\n        <>\n          <h1 className=\"app-title\">Medicine Reminder</h1>\n          <ReminderForm onSetReminder={handleNewReminder} />\n          <ReminderList \n            reminders={reminders} \n            onDelete={deleteReminder} \n          />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}